/* 1. The top 20 players ranked by slugging percentage in away games only in the 2023 season,
      limited to players with at least 250 total plate appearances. */

WITH away_player_games AS (
    SELECT  
      pg.*
    , g.date
    , ROW_NUMBER() OVER(PARTITION BY pg.player_id ORDER BY g.date DESC) AS r_desc
    FROM mlb_data.player_games pg
    INNER JOIN mlb_data.games g 
        ON 1=1
           AND pg.game_pk = g.game_pk 
           AND pg.team_id = g.away_team_id 
           AND g.season = 2023
)

-- SELECT * FROM away_player_games

, player_team_eos AS (
    SELECT 
      player_id 
    , team_id 
    FROM away_player_games
    WHERE 1=1
          AND r_desc = 1
)

-- SELECT * FROM player_team_eos

, away_player_stats AS (
    SELECT 
      player_id 
    , SUM(PA) AS total_pa
    , SUM(S + (2 * D) + (3 * T) + (4 * HR)) / (SUM(AB)) AS slg
    FROM away_player_games
    GROUP BY 1
    HAVING SUM(PA) >= 250
)

-- SELECT * FROM away_player_stats

, top_20_players AS (
    SELECT 
      *
    FROM away_player_stats 
    ORDER BY slg DESC 
    LIMIT 20
)

-- SELECT * FROM top_20_players

, final_data AS (
    SELECT 
      a.player_id 
    , p.name 
    , t.abbrev
    , t.name AS team_name 
    , a.total_pa 
    , a.slg
    FROM top_20_players a
    LEFT JOIN mlb_data.players p
        ON a.player_id = p.id 
    LEFT JOIN player_team_eos t_eos 
        ON a.player_id = t_eos.player_id 
    LEFT JOIN mlb_data.teams t 
        ON t_eos.team_id = t.id
)

SELECT * FROM final_data

;


/* 2. The top 20 players ranked by home runs in a single season between 2022 and 2023. */

WITH player_team_games AS (
    SELECT 
      pg.player_id 
    , pg.team_id
    , pg.HR 
    , g.season 
    , g.date 
    , ROW_NUMBER() OVER(PARTITION BY pg.player_id, g.season ORDER BY g.date DESC) AS r_desc
    FROM mlb_data.player_games pg
    INNER JOIN mlb_data.games g
      ON pg.game_pk = g.game_pk AND g.season BETWEEN 2022 AND 2023
) 

, player_team_eos AS (
    SELECT 
      player_id 
    , season
    , team_id 
    FROM player_team_games
    WHERE 1=1
          AND r_desc = 1
)

, total_hr_season AS (
    SELECT 
      pg.season
    , pg.player_id 
    , p.name
    , t.abbrev 
    , t.name AS team_name
    , SUM(pg.HR) AS total_HR
    FROM player_team_games pg
    LEFT JOIN mlb_data.players p 
        ON pg.player_id = p.id
    LEFT JOIN player_team_eos t_eos 
        ON pg.season = t_eos.season AND pg.player_id = t_eos.player_id
    LEFT JOIN mlb_data.teams t 
        ON t_eos.team_id = t.id
    GROUP BY 1,2,3,4,5
)

/* Using name to 'break ties', as criteria wasn't specified */
SELECT * FROM total_hr_season ORDER BY total_HR DESC, name LIMIT 20
;


/* 3. The top 20 teams ranked by total runs scored in a game between 2022 and 2023. */

WITH team_stats AS (
    SELECT 
      tg.game_pk
    , g.season 
    , g.date
    , tg.team_id 
    , SUM(tg.R) AS total_r
    FROM mlb_data.team_games tg
    INNER JOIN mlb_data.games g 
        ON tg.game_pk = g.game_pk AND g.season BETWEEN 2022 AND 2023
    GROUP BY 1,2,3,4
)

-- SELECT * FROM team_stats

SELECT 
  game_pk 
, season 
, t.abbrev 
, t.name AS team_name 
, total_r 
FROM team_stats ts 
LEFT JOIN mlb_data.teams t 
    ON ts.team_id = t.id
ORDER BY total_r DESC
LIMIT 20

;


/* 4. The top 20 non-Red Sox players ranked by total doubles at Fenway Park (venue ID 3)
over the 2022 and 2023 seasons combined. */

WITH player_team_games AS (
    SELECT 
      pg.player_id 
    , pg.team_id
    , t.abbrev 
    , t.name AS team_name
    , pg.D 
    , g.season 
    , g.date 
    , g.venue_id
    , ROW_NUMBER() OVER(PARTITION BY pg.player_id ORDER BY g.date DESC) AS r_desc
    FROM mlb_data.player_games pg
    INNER JOIN mlb_data.games g
      ON pg.game_pk = g.game_pk AND g.season BETWEEN 2022 AND 2023
    INNER JOIN mlb_data.teams t 
        ON pg.team_id = t.id
) 

, player_team_eos AS (
    SELECT 
      player_id 
    , season
    , abbrev
    , team_name 
    FROM player_team_games
    WHERE 1=1
          AND r_desc = 1
)

, fenway_stats AS (
    SELECT 
      ptg.player_id 
    , p.name
    , t_eos.abbrev 
    , t_eos.team_name
    , SUM(D) AS total_d
    FROM player_team_games ptg 
    LEFT JOIN player_team_eos t_eos 
        ON ptg.player_id = t_eos.player_id 
    LEFT JOIN mlb_data.players p 
        ON ptg.player_id = p.id 
    WHERE 1=1
          AND ptg.venue_id = 3
          AND ptg.abbrev <> 'BOS'
    GROUP BY 1,2
)

/* Using name to 'break ties', as criteria wasn't specified */
SELECT * FROM fenway_stats ORDER BY total_d DESC, name LIMIT 20

/* 5. Team standings organized by division, similar to what you would see on MLB.com
(https://www.mlb.com/standings/). */
WITH season_win_totals AS (
    SELECT 
      g.season 
    , tg.team_id 
    , COUNT(tg.game_pk) AS G
    , SUM(tg.win) AS W
    , SUM(tg.R) AS RS
    , SUM(tg.RA) AS RA
    , SUM(tg.home) AS G_HOME
    , SUM(CASE WHEN tg.home = 1 THEN tg.win END) AS W_HOME
    , COUNT(CASE WHEN tg.home = 0 THEN tg.game_pk END) AS G_AWAY
    , SUM(CASE WHEN tg.home = 0 THEN tg.win END) AS W_AWAY
    FROM mlb_data.team_games tg
    INNER JOIN mlb_data.games g
        ON tg.game_pk = g.game_pk AND g.season = 2023
    GROUP BY 1,2
)

-- SELECT * FROM season_win_totals

, standings_prep AS (
    SELECT 
      season 
    , t.league 
    , t.division
    , CASE
        WHEN t.division = 'E' THEN 1 
        WHEN t.division = 'C' THEN 2
        WHEN t.division = 'W' THEN 3 
        ELSE NULL 
      END AS division_order
    , t.abbrev 
    , t.name AS team_name 
    , W
    , (G - W) AS L
    , W / G AS PCT
    , RS
    , RA 
    , RS - RA AS DIFF 
    , G_HOME 
    , W_HOME 
    , G_HOME - W_HOME AS L_HOME
    , G_AWAY 
    , W_AWAY
    , G_AWAY - W_AWAY AS L_AWAY
    , ROW_NUMBER() OVER(PARTITION BY season, t.league, t.division ORDER BY W DESC) AS standings_r
    FROM season_win_totals swt
    LEFT JOIN mlb_data.teams t 
        ON swt.team_id = t.id

)

SELECT 
  season 
, league 
, division 
, abbrev
, team_name 
, W 
, L
, PCT 
, RS 
, RA 
, DIFF 
, CONCAT(W_HOME, '-', L_HOME) AS HOME
, CONCAT(W_AWAY, '-', L_AWAY) AS AWAY
FROM standings_prep
ORDER BY league, division_order, W DESC







/* 6. Show off your creativity and SQL expertise by writing one or more additional queries that
combine the data in these tables. */

  /* 
     Top 20 players with the highest OPS against
     non-divisional opponents in a single season,
     between 2022 and 2023 (minimum 100 PA in such games).
  */

  WITH player_team_games AS (
    SELECT 
      pg.player_id 
    , pg.team_id
    , pg.PA
    , pg.AB  
    , pg.H 
    , pg.S 
    , pg.D 
    , pg.T 
    , pg.HR 
    , pg.BB 
    , pg.HBP
    , pg.SF
    , g.season 
    , g.date 
    , g.home_team_id 
    , home_teams.league AS home_league
    , home_teams.division AS home_division
    , g.away_team_id 
    , away_teams.league AS away_league
    , away_teams.division AS away_division
    , ROW_NUMBER() OVER(PARTITION BY pg.player_id, g.season ORDER BY g.date DESC) AS r_desc
    FROM mlb_data.player_games pg
    INNER JOIN mlb_data.games g
      ON 1=1 
         AND pg.game_pk = g.game_pk 
         AND g.season BETWEEN 2022 AND 2023
    LEFT JOIN mlb_data.teams home_teams 
      ON g.home_team_id = home_teams.id
    LEFT JOIN mlb_data.teams away_teams 
      ON g.away_team_id = away_teams.id
) 

-- SELECT * FROM player_team_games ORDER BY date DESC LIMIT 100

, player_team_eos AS (
    SELECT 
      player_id 
    , season
    , team_id 
    FROM player_team_games
    WHERE 1=1
          AND r_desc = 1
)

, non_div_stats_prep AS (
  SELECT 
    player_id 
  , season 
  , SUM(PA) AS total_PA
  , SUM(H + BB + HBP) / SUM(AB + BB + HBP + SF) AS OBP
  , SUM(S + (2 * D) + (3 * T) + (4 * HR)) / (SUM(AB)) AS SLG
  FROM player_team_games
  WHERE 1=1
        AND (
             home_league <> away_league 
          OR (home_league = away_league AND home_division <> away_division)
        )
  GROUP BY 1,2
  HAVING SUM(PA) >= 100
)

-- SELECT * FROM non_div_stats_prep

, non_div_top_20 AS (
  SELECT 
    ndsp.season 
  , ndsp.player_id 
  , p.name 
  , t.abbrev 
  , t.name AS team_name
  , ndsp.total_PA
  , ndsp.OBP
  , ndsp.SLG
  , ndsp.OBP + ndsp.SLG AS OPS
  FROM non_div_stats_prep ndsp
    LEFT JOIN mlb_data.players p 
        ON ndsp.player_id = p.id
    LEFT JOIN player_team_eos t_eos 
        ON ndsp.season = t_eos.season AND ndsp.player_id = t_eos.player_id
    LEFT JOIN mlb_data.teams t 
        ON t_eos.team_id = t.id
  ORDER BY OPS DESC
  LIMIT 20
)

SELECT * FROM non_div_top_20
;



/* 
     The player with the highest share of a team's total HRs within a season, 
     split by day of week (DoW) and season
     between 2022 and 2023

*/

WITH player_dow_hrs AS (
  SELECT 
    g.season 
  , DAYOFWEEK(g.date) AS dow_int
  , DAYNAME(g.date) AS dow
  , pg.team_id 
  , pg.player_id
  , SUM(pg.HR) AS HR
  FROM mlb_data.player_games pg
  INNER JOIN mlb_data.games g
      ON pg.game_pk = g.game_pk AND g.season BETWEEN 2022 AND 2023
  GROUP BY 1,2,3,4,5
)

-- SELECT * FROM player_dow_hrs LIMIT 10

, team_dow_hrs AS (
  SELECT 
    g.season 
  , DAYNAME(g.date) AS dow
  , tg.team_id 
  , SUM(tg.HR) AS team_HR
  FROM mlb_data.team_games tg
  INNER JOIN mlb_data.games g
      ON tg.game_pk = g.game_pk AND g.season BETWEEN 2022 AND 2023
  GROUP BY 1,2,3
)

-- SELECT * FROM team_dow_hrs

, joined_data AS (
  SELECT 
    p.*
  , t.team_HR
  FROM player_dow_hrs p 
  LEFT JOIN team_dow_hrs t 
    ON 1=1
       AND p.season = t.season
       AND p.dow = t.dow
       AND p.team_id = t.team_id
)

-- SELECT * FROM joined_data WHERE player_id = '572233' ORDER BY HR DESC

, final_data_prep AS (
  SELECT 
    season 
  , dow 
  , dow_int
  , team_id 
  , player_id
  , HR 
  , team_HR 
  , ROUND(HR / team_HR, 3) AS perc_team_HR 
  FROM joined_data
)

, final_data AS (
  SELECT 
    fdp.season 
  , fdp.dow 
  , fdp.dow_int
  , fdp.team_id 
  , fdp.player_id
  , t.abbrev 
  , t.name AS team_name 
  , p.name 
  , fdp.HR 
  , fdp.team_HR 
  , fdp.perc_team_HR
  , ROW_NUMBER() OVER(PARTITION BY fdp.season, fdp.dow, fdp.team_id ORDER BY fdp.perc_team_HR DESC, p.name) AS r 
  FROM final_data_prep fdp
  LEFT JOIN mlb_data.players p 
    ON fdp.player_id = p.id
  LEFT JOIN mlb_data.teams t 
    ON fdp.team_id = t.id
)

SELECT 
  season 
, abbrev
, team_name 
, dow 
, name 
, HR
, team_HR 
, perc_team_HR
FROM final_data 
WHERE 1=1
      AND r = 1
ORDER BY season, abbrev, team_name, dow_int, r ASC

